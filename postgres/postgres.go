package postgres

import (
	"acme/model"
	"database/sql"
	"fmt"
	_ "github.com/lib/pq"
	"errors"
)

var DB *sql.DB

func InitDB(connectionString string) error {

	db, err := sql.Open("postgres", connectionString)
	if err != nil {
		return fmt.Errorf("error connecting to the database: %w", err)
	}
	DB = db

	_, err = DB.Exec(
		`CREATE TABLE IF NOT EXISTS users (
		id BIGINT GENERATED BY DEFAULT AS IDENTITY PRIMARY KEY,
		name VARCHAR(50) NOT NULL
		);`)
	if err != nil {
		return err
	}

	if err := DB.Ping(); err != nil {
		return fmt.Errorf("error pinging the database: %w", err)
	}

	fmt.Println("Successfully connected to the database!")
	return nil
}

func GetUsers() ([]model.User, error) {
	rows, err := DB.Query("SELECT id, name FROM users")

	if err != nil {
		fmt.Println("Error querying the database:", err)
		return []model.User{}, errors.New("database could not be queried")
	}

	defer rows.Close()

	users := []model.User{}

	for rows.Next() {
		var user model.User

		if err := rows.Scan(&user.ID, &user.Name); err != nil {
			fmt.Println("Error scanning row values:", err)
			return []model.User{}, errors.New("database could not be queried")
		}
		users = append(users, user)
	}


	return users, nil
}
